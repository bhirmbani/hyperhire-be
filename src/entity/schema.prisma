// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id        Int              @id @default(autoincrement())
  title     String
  cover_img String
  point     Int
  Tag       Tag[]
  Authors   AuthorsOnBooks[]
  Orders    BooksOnOrders[]
  Cart      Cart[]
}

enum TagName {
  FICTION
  NONFICTION
  SCIENCE
  ESSAY
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   TagName
  Book   Book    @relation(fields: [bookId], references: [id])
  bookId Int
}

model Author {
  id    Int              @id @default(autoincrement())
  name  String
  Books AuthorsOnBooks[]
}

model AuthorsOnBooks {
  id       Int    @id @default(autoincrement())
  Book     Book   @relation(fields: [bookId], references: [id])
  bookId   Int // relation scalar field (used in the `@relation` attribute above)
  Author   Author @relation(fields: [authorId], references: [id])
  authorId Int // relation scalar field (used in the `@relation` attribute above)
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  point    Int
}

model Cart {
  id     Int   @id @default(autoincrement())
  userId Int?
  bookId Int?
  Book   Book? @relation(fields: [bookId], references: [id])
}

enum OrderStatus {
  UNPAID
  PAID
  CANCEL
}

model BooksOnOrders {
  id      Int    @id @default(autoincrement())
  Order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?
  Book    Book?  @relation(fields: [bookId], references: [id])
  bookId  Int?
}

model Order {
  id     Int             @id @default(autoincrement())
  userId Int
  status OrderStatus
  Books  BooksOnOrders[]
}
